/**
 * 仿微信组件化根据业务模块生成对应的api模块功能（复制模块制定文件到一个新的模块）
 * @param self
 * @param moduleName
 * @return
 */
static def include_module_api(def self, String moduleName) {
    //方便代码提示
    def settingsObject = self as Settings
    def ModuleApiName = "business_api"
    //获得工程根目录
    def originFile = settingsObject.project(moduleName).projectDir
    def originDir = originFile.path
    println "OriginDir=" + originDir
    def targetDir = "${originFile.getParent()}${File.separator}$ModuleApiName${File.separator}${originFile.getName()}_api"
    //制作的 SDK 工程的目录
    println "TargetDir=" + targetDir
    //制作的 SDK 工程的名字
    String sdkName = "${settingsObject.project(moduleName).name}_api"
    //第二次生成之前先删除上次的文件(iml)
    FileTree targetFiles = settingsObject.fileTree(targetDir)
    targetFiles.exclude "*.iml"
    targetFiles.each { File file ->
        file.delete()
    }
    //从待制作SDK工程拷贝目录到 SDK工程 只拷贝目录
    settingsObject.copy {
        from originDir
        into targetDir
        //拷贝文件
        include '**/api/**'
        include '**/AndroidManifest.xml'
        include 'build.gradle'
    }
    def originManifest = settingsObject.fileTree(targetDir).exclude("**/build").find {
        it.name == "AndroidManifest.xml"
    }
    def parser = new XmlParser().parse(originManifest)
    parser.setValue([])
    new XmlNodePrinter(new PrintWriter(originManifest)).print(parser)
    //添加到setting.gradle中
    settingsObject.include ":$ModuleApiName:$sdkName"
}

ext.include_module_api = this.&include_module_api